menu.add_check_box("Leg breaker")
menu.add_check_box("Pitch 0 on land")
menu.add_slider_int("Pitch 0 tick", 0, 100)

local Crow_lua_loading = true

client.add_callback("unload", function ()
    Crow_lua_loading = false
end)

local ffi = require("ffi")

ffi.cdef[[
    typedef void*(__thiscall* c_entity_list_get_client_entity_t)(void*, int);
    struct pose_params_t {
        char pad[8];
        float 	m_flStart;
        float 	m_flEnd;
        float 	m_flState;
    };
]]



local animbreaker_cache = {}
local last_time = -1
local ptr = nil
local index = -1
local local_player = nil

local function pointer()
    if last_time == globals.get_tickcount() then
        return ptr
    end
    ptr = entitylist.get_local_player()
    if ptr then 
        index = ptr:get_index()
    else 
        index = -1
    end
    last_time = globals.get_tickcount()
    return ptr
end

local function getindex()
    pointer()
    return index
end

local function bind_argument(fn, arg)
    return function(...)
        return fn(arg, ...)
    end
end

local get_pose_parameters = ffi.cast("struct pose_params_t*(__thiscall* )( void*, int )", utils.find_signature("client.dll", "55 8B EC 8B 45 08 57 8B F9 8B 4F 04 85 C9 75 15"))
local get_client_entity = bind_argument(ffi.cast("c_entity_list_get_client_entity_t", ffi.cast(ffi.typeof("uintptr_t**"), utils.create_interface("client.dll", "VClientEntityList003"))[0][3]), ffi.cast(ffi.typeof("uintptr_t**"), utils.create_interface("client.dll", "VClientEntityList003")))


local function animbreaker_set_params(player_ptr, layer, start_val, end_val)


    player_ptr = ffi.cast("unsigned int", player_ptr)
    if player_ptr == 0x0 then
        return false
    end
    local studio_hdr = ffi.cast("void**", player_ptr + 0x2950)[0]
    if studio_hdr == nil then
        return false
    end
    local pose_params = get_pose_parameters(studio_hdr, layer)
    if pose_params == nil or pose_params == 0x0 then
        return
    end
    if animbreaker_cache[layer] == nil then
        animbreaker_cache[layer] = {}
        animbreaker_cache[layer].m_flStart = pose_params.m_flStart
        animbreaker_cache[layer].m_flEnd = pose_params.m_flEnd
        animbreaker_cache[layer].m_flState = pose_params.m_flState
        animbreaker_cache[layer].installed = false
        return true
    end
    if start_val ~= nil and not animbreaker_cache[layer].installed then
        pose_params.m_flStart = start_val
        pose_params.m_flEnd = end_val
        pose_params.m_flState = (pose_params.m_flStart + pose_params.m_flEnd) / 2
        animbreaker_cache[layer].installed = true
        return true
    end
    if animbreaker_cache[layer].installed then
        pose_params.m_flStart = animbreaker_cache[layer].m_flStart
        pose_params.m_flEnd = animbreaker_cache[layer].m_flEnd
        pose_params.m_flState = animbreaker_cache[layer].m_flState
        animbreaker_cache[layer].installed = false
        return true
    end
    return false
end

local function animbreaker_handle_prediction(cmd)
    local_player = get_client_entity(getindex())
    if local_player == nil then
        return
    end


    if menu.get_bool("Leg breaker") then
        animbreaker_set_params(local_player, 0, -180, -179)
        menu.set_int("misc.leg_movement", 2)
    end
end
local function animbreaker_handle_cmove()
    local local_player = get_client_entity(getindex())
    if local_player == nil then
        return
    end
    for k, v in pairs(animbreaker_cache) do
        animbreaker_set_params(local_player, k)
    end
end
local function animbreaker_on_unload()
    local local_player = get_client_entity(getindex())
    if local_player == nil then
        return
    end
    for k, v in pairs(animbreaker_cache) do
        animbreaker_set_params(local_player, k)
    end
end
client.add_callback("create_move", function ()
    if not Crow_lua_loading then return end
    animbreaker_handle_cmove()
end)
client.add_callback("create_move", function (cmd)
    if not Crow_lua_loading then return end
    animbreaker_handle_prediction(cmd)
end)
client.add_callback("unload", function ()
    animbreaker_on_unload()
end)



local ground_tick = 1
local end_tick = 0

local function pitch0()
    local inAir = entitylist.get_local_player():get_prop_int("CBasePlayer", "m_vecVelocity[2]") ~= 0
    local curtick = globals.get_tickcount()
    if inAir == true then
        ground_tick = 0
        end_tick = curtick + menu.get_int("Pitch 0 tick")
    else
        ground_tick = ground_tick + 1
    end
    if ground_tick > 1 and end_tick > curtick then
        animbreaker_set_params(local_player, 12, 0.999, 1)
    end
end

client.add_callback("create_move", function ()
    if not Crow_lua_loading then return end
    if not entitylist.get_local_player() or not menu.get_bool("Pitch 0 on land") then
        return
    end
    pitch0()
end)

